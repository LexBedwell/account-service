// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lexbedwell/account-service/internal/usecase/service (interfaces: DaoInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDaoInterface is a mock of DaoInterface interface
type MockDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDaoInterfaceMockRecorder
}

// MockDaoInterfaceMockRecorder is the mock recorder for MockDaoInterface
type MockDaoInterfaceMockRecorder struct {
	mock *MockDaoInterface
}

// NewMockDaoInterface creates a new mock instance
func NewMockDaoInterface(ctrl *gomock.Controller) *MockDaoInterface {
	mock := &MockDaoInterface{ctrl: ctrl}
	mock.recorder = &MockDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaoInterface) EXPECT() *MockDaoInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockDaoInterface) CreateUser(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockDaoInterfaceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDaoInterface)(nil).CreateUser), arg0)
}

// GetUserFromId mocks base method
func (m *MockDaoInterface) GetUserFromId(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromId", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromId indicates an expected call of GetUserFromId
func (mr *MockDaoInterfaceMockRecorder) GetUserFromId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromId", reflect.TypeOf((*MockDaoInterface)(nil).GetUserFromId), arg0)
}
